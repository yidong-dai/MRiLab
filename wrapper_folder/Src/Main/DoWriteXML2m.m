
function DoWriteXML2m(S, file)
%DoWriteXML2m(theStruct, m-file)
%convert a MATLAB XML structure to m-function which produces virtual structure.

fid=fopen(file,'wt+');
fprintf(fid, '%s\n', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
fprintf(fid, '%s\n', '% MRiLab auto generated file: DO NOT EDIT!     %');
fprintf(fid, '%s\n', '% Generated by MRiLab "DoWriteXML2m" Generator %');        
fprintf(fid, '%s\n', '% MRiLab Version 1.3                           %');    
fprintf(fid, '%s\n', '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'); 
switch S.Name
    case 'MRiLabSeq'
        % S.Children(1) CVs
        % S.Children(2) Specials
        % S.Children(3) Pulses
          % S.Children(3).Children(1) rf
          % S.Children(3).Children(3) GzSS
          % S.Children(3).Children(3) GyPE
          % S.Children(3).Children(4) GxR
          % S.Children(3).Children(5) ADC
        % S.Children(4...) Pulses
        
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='PSD_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function [rfAmp,rfPhase,rfFreq,rfCoil,GzAmp,GyAmp,GxAmp,ADC,Ext,uts,ts,flags]=' FileName]);
        fprintf(fid,'%s\n', 'global VCtl');
        fprintf(fid,'%s\n', 'global VVar');
        for parai=1:length(S.Children(1).Attributes) % CVs
            if ~isempty(S.Children(1).Attributes(parai).Value)
                fprintf(fid, '%s\n', [S.Children(1).Attributes(parai).Name '=' S.Children(1).Attributes(parai).Value ';']);
            else
                fprintf(fid, '%s\n', [S.Children(1).Attributes(parai).Name '=[];']);
            end
        end
        
        % initialize sequence
        fprintf(fid, '%s\n', ['rfAmpAll=[];']);
        fprintf(fid, '%s\n', ['rfPhaseAll=[];']);
        fprintf(fid, '%s\n', ['rfFreqAll=[];']);
        fprintf(fid, '%s\n', ['rfCoilAll=[];']);
        fprintf(fid, '%s\n', ['GzAmpAll=[];']);
        fprintf(fid, '%s\n', ['GyAmpAll=[];']);
        fprintf(fid, '%s\n', ['GxAmpAll=[];']);
        fprintf(fid, '%s\n', ['ADCAll=[];']);
        fprintf(fid, '%s\n', ['ExtAll=[];']);
        fprintf(fid, '%s\n', ['rfTimeAll=[];']);
        fprintf(fid, '%s\n', ['GzTimeAll=[];']);
        fprintf(fid, '%s\n', ['GyTimeAll=[];']);
        fprintf(fid, '%s\n', ['GxTimeAll=[];']);
        fprintf(fid, '%s\n', ['ADCTimeAll=[];']);
        fprintf(fid, '%s\n', ['ExtTimeAll=[];']);
        fprintf(fid, '%s\n', ['SEtAll=[];']);
        
        fprintf(fid, '%s\n', ['uts=[];']);
        fprintf(fid, '%s\n', ['ts=[];']);
        fprintf(fid, '%s\n', ['flags=[];']);
        
        % record varying TR for Plotting sequence waveform purpuse
        fprintf(fid, '%s\n', ['if VCtl.PlotSeq == 1']);
        fprintf(fid, '%s\n', ['rfAmp=[];']);
        fprintf(fid, '%s\n', ['rfPhase=[];']);
        fprintf(fid, '%s\n', ['rfFreq=[];']);
        fprintf(fid, '%s\n', ['rfCoil=[];']);
        fprintf(fid, '%s\n', ['GzAmp=[];']);
        fprintf(fid, '%s\n', ['GyAmp=[];']);
        fprintf(fid, '%s\n', ['GxAmp=[];']);
        fprintf(fid, '%s\n', ['ADC=[];']);
        fprintf(fid, '%s\n', ['Ext=[];']);
        for p=3:length(S.Children) % Sequence line
            for parai=1:length(S.Children(p).Attributes) % SEt Attribute
                switch S.Children(p).Attributes(parai).Value(1)
                    case '$'
                        fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(p).Attributes(parai).Value(3:end) '};']);
                        fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=AttributeOpt{' S.Children(p).Attributes(parai).Value(2) '};']);
                    otherwise
                        if ~strcmp(S.Children(p).Attributes(parai).Name,'Notes')
                            fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=' S.Children(p).Attributes(parai).Value ';']);
                        else
                            fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=''' S.Children(p).Attributes(parai).Value ''';']);
                        end
                end
            end
            fprintf(fid, '%s\n' ,['if VVar.TRCount<TRStart | VVar.TRCount>TREnd | mod(VVar.TRCount-TRStart,Freq)~=0 | strcmp(Switch,''off'')']);
            fprintf(fid, '%s\n' ,['% do nothing']);
            fprintf(fid, '%s\n' ,['else']);
            fprintf(fid, '%s\n', ['ts = [ts tS tE];']);
            fprintf(fid, '%s\n' ,['end']);
        end
        fprintf(fid, '%s\n', ['ts = [0 max(ts)-min(ts)];']);
        fprintf(fid, '%s\n', ['return;']);
        fprintf(fid, '%s\n', ['end']);
        
        for p=3:length(S.Children) % Sequence line
            fprintf(fid, '%s\n', ['%==============Pulses ' num2str(p-2) '==============']);
            fprintf(fid, '%s\n', ['rfAmp=[];']);
            fprintf(fid, '%s\n', ['rfPhase=[];']);
            fprintf(fid, '%s\n', ['rfFreq=[];']);
            fprintf(fid, '%s\n', ['rfCoil=[];']);
            fprintf(fid, '%s\n', ['GzAmp=[];']);
            fprintf(fid, '%s\n', ['GyAmp=[];']);
            fprintf(fid, '%s\n', ['GxAmp=[];']);
            fprintf(fid, '%s\n', ['ADC=[];']);
            fprintf(fid, '%s\n', ['Ext=[];']);
            fprintf(fid, '%s\n', ['rfTime=[];']);
            fprintf(fid, '%s\n', ['GzTime=[];']);
            fprintf(fid, '%s\n', ['GyTime=[];']);
            fprintf(fid, '%s\n', ['GxTime=[];']);
            fprintf(fid, '%s\n', ['ADCTime=[];']);
            fprintf(fid, '%s\n', ['ExtTime=[];']);
            
            for parai=1:length(S.Children(p).Attributes) % Pulse Attribute
                switch S.Children(p).Attributes(parai).Value(1)
                    case '$'
                        fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(p).Attributes(parai).Value(3:end) '};']);
                        fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=AttributeOpt{' S.Children(p).Attributes(parai).Value(2) '};']);
                    otherwise
                        if ~strcmp(S.Children(p).Attributes(parai).Name,'Notes')
                            fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=' S.Children(p).Attributes(parai).Value ';']);
                        else
                            fprintf(fid, '%s\n', [S.Children(p).Attributes(parai).Name '=''' S.Children(p).Attributes(parai).Value ''';']);
                        end
                end
            end
            
            % check SE
            fprintf(fid, '%s\n', 'if isempty(tS) | isempty(tE) | (tS>=tE)');
            fprintf(fid, '%s\n', ['error(''SE setting is incorrect for Pulses ' num2str(p-2) '!'');']);
            fprintf(fid, '%s\n', 'end');
            
            fprintf(fid, '%s\n' ,['if VVar.TRCount<TRStart | VVar.TRCount>TREnd | mod(VVar.TRCount-TRStart,Freq)~=0 | strcmp(Switch,''off'')']);
            fprintf(fid, '%s\n' ,['% do nothing']);
            fprintf(fid, '%s\n' ,['else']);
            fprintf(fid, '%s\n', '%--------------------');
            for i=1:length(S.Children(p).Children) % Sequence line
                for j=1:length(S.Children(p).Children(i).Children)
                    for parai=1:length(S.Children(p).Children(i).Children(j).Attributes)
                        if ~isempty(S.Children(p).Children(i).Children(j).Attributes(parai).Value)
                            switch S.Children(p).Children(i).Children(j).Attributes(parai).Value(1)
                                case '$'
                                    fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(p).Children(i).Children(j).Attributes(parai).Value(3:end) '};']);
                                    fprintf(fid, '%s\n', ['p.' S.Children(p).Children(i).Children(j).Attributes(parai).Name '=AttributeOpt{' S.Children(p).Children(i).Children(j).Attributes(parai).Value(2) '};']);
                                otherwise
                                    if ~strcmp(S.Children(p).Children(i).Children(j).Attributes(parai).Name,'Notes')
                                        fprintf(fid, '%s\n', ['p.' S.Children(p).Children(i).Children(j).Attributes(parai).Name '=' S.Children(p).Children(i).Children(j).Attributes(parai).Value ';']);
                                    else
                                        fprintf(fid, '%s\n', ['p.' S.Children(p).Children(i).Children(j).Attributes(parai).Name '=''' S.Children(p).Children(i).Children(j).Attributes(parai).Value ''';']);
                                    end
                            end
                        else
                            fprintf(fid, '%s\n', ['p.' S.Children(p).Children(i).Children(j).Attributes(parai).Name '=[];']);
                        end
                    end
                    fprintf(fid, '%s\n' ,['if strcmp(p.Switch,''on'')']);
                    switch S.Children(p).Children(i).Name
                        case 'rf'
                            fprintf(fid, '%s\n' ,['if strcmp(p.AnchorTE,''on'')']);
                            fprintf(fid, '%s\n' ,['switch VCtl.TEAnchor']);
                            fprintf(fid, '%s\n' ,['case ''Start''']);
                            fprintf(fid, '%s\n' ,['VCtl.TEAnchorTime=p.tStart; ']);
                            fprintf(fid, '%s\n' ,['case ''Middle''']);
                            fprintf(fid, '%s\n' ,['VCtl.TEAnchorTime=(p.tStart+p.tEnd)/2; ']);
                            fprintf(fid, '%s\n' ,['case ''End''']);
                            fprintf(fid, '%s\n' ,['VCtl.TEAnchorTime=p.tEnd;']);
                            fprintf(fid, '%s\n' ,['end']);
                            fprintf(fid, '%s\n' ,['end']);
                            fprintf(fid, '%s\n', ['[rfAmp' num2str(j) ',rfPhase' num2str(j) ',rfFreq' num2str(j) ',rfCoil' num2str(j) ',rfTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            
                            fprintf(fid, '%s\n', ['if strcmp(VCtl.MultiTransmit,''off'')']);
                            fprintf(fid, '%s\n', ['if VCtl.MasterTxCoil==rfCoil' num2str(j) '(1)']);
                            fprintf(fid, '%s\n', ['rfAmp=[' 'rfAmp ' 'rfAmp' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfPhase=[' 'rfPhase ' 'rfPhase' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfFreq=[' 'rfFreq ' 'rfFreq' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfCoil=[' 'rfCoil ' 'rfCoil' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfTime=[' 'rfTime ' 'rfTime' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['end']);
                            fprintf(fid, '%s\n', ['else']);
                            fprintf(fid, '%s\n', ['rfAmp=[' 'rfAmp ' 'rfAmp' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfPhase=[' 'rfPhase ' 'rfPhase' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfFreq=[' 'rfFreq ' 'rfFreq' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfCoil=[' 'rfCoil ' 'rfCoil' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['rfTime=[' 'rfTime ' 'rfTime' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['end']);
                        case 'GzSS'
                            fprintf(fid, '%s\n', ['[GzAmp' num2str(j) ',GzTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            fprintf(fid, '%s\n', ['GzAmp=[' 'GzAmp ' 'GzAmp' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['GzTime=[' 'GzTime ' 'GzTime' num2str(j) '];']);
                        case 'GyPE'
                            fprintf(fid, '%s\n', ['[GyAmp' num2str(j) ',GyTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            fprintf(fid, '%s\n', ['GyAmp=[' 'GyAmp ' 'GyAmp' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['GyTime=[' 'GyTime ' 'GyTime' num2str(j) '];']);
                        case 'GxR'
                            fprintf(fid, '%s\n', ['[GxAmp' num2str(j) ',GxTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            fprintf(fid, '%s\n', ['GxAmp=[' 'GxAmp ' 'GxAmp' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['GxTime=[' 'GxTime ' 'GxTime' num2str(j) '];']);
                        case 'ADC'
                            fprintf(fid, '%s\n', ['[ADC' num2str(j) ',ADCTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            fprintf(fid, '%s\n', ['ADC=[' 'ADC ' 'ADC' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['ADCTime=[' 'ADCTime ' 'ADCTime' num2str(j) '];']);
                        case 'Ext'
                            fprintf(fid, '%s\n', ['[Ext' num2str(j) ',ExtTime' num2str(j) ']=' S.Children(p).Children(i).Children(j).Name '(p);']);
                            fprintf(fid, '%s\n', ['Ext=[' 'Ext ' 'Ext' num2str(j) '];']);
                            fprintf(fid, '%s\n', ['ExtTime=[' 'ExtTime ' 'ExtTime' num2str(j) '];']);
                    end
                    fprintf(fid, '%s\n' ,['end']);
                    fprintf(fid, '%s\n', 'p=[];');
                    fprintf(fid, '%s\n', '%--------------------');
                end
            end
            fprintf(fid,'%s\n', 'SEt=[tS tE];');
            
            % SE time clip
            fprintf(fid,'%s\n', 'rfAmp(rfTime<0 | rfTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'rfPhase(rfTime<0 | rfTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'rfFreq(rfTime<0 | rfTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'rfCoil(rfTime<0 | rfTime>SEt(2)-SEt(1)) = [];'); 
            fprintf(fid,'%s\n', 'GzAmp(GzTime<0 | GzTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'GyAmp(GyTime<0 | GyTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'GxAmp(GxTime<0 | GxTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'ADC(ADCTime<0 | ADCTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'Ext(ExtTime<0 | ExtTime>SEt(2)-SEt(1)) = [];');

            fprintf(fid,'%s\n', 'rfTime(rfTime<0 | rfTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'GzTime(GzTime<0 | GzTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'GyTime(GyTime<0 | GyTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'GxTime(GxTime<0 | GxTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'ADCTime(ADCTime<0 | ADCTime>SEt(2)-SEt(1)) = [];');
            fprintf(fid,'%s\n', 'ExtTime(ExtTime<0 | ExtTime>SEt(2)-SEt(1)) = [];');
            
            % prevent -1.#IND error in rf transmitting
            fprintf(fid,'%s\n', 'rfAmp(abs(rfAmp)<eps) = 0;');
            
            % offset time
            fprintf(fid,'%s\n', 'rfTime = rfTime + SEt(1);');
            fprintf(fid,'%s\n', 'GzTime = GzTime + SEt(1);');
            fprintf(fid,'%s\n', 'GyTime = GyTime + SEt(1);');
            fprintf(fid,'%s\n', 'GxTime = GxTime + SEt(1);');
            fprintf(fid,'%s\n', 'ADCTime = ADCTime + SEt(1);');
            fprintf(fid,'%s\n', 'ExtTime = ExtTime + SEt(1);');
            
            fprintf(fid, '%s\n', ['rfAmpAll=[rfAmpAll rfAmp];']);
            fprintf(fid, '%s\n', ['rfPhaseAll=[rfPhaseAll rfPhase];']);
            fprintf(fid, '%s\n', ['rfFreqAll=[rfFreqAll rfFreq];']);
            fprintf(fid, '%s\n', ['rfCoilAll=[rfCoilAll rfCoil];']);
            fprintf(fid, '%s\n', ['GzAmpAll=[GzAmpAll GzAmp];']);
            fprintf(fid, '%s\n', ['GyAmpAll=[GyAmpAll GyAmp];']);
            fprintf(fid, '%s\n', ['GxAmpAll=[GxAmpAll GxAmp];']);
            fprintf(fid, '%s\n', ['ADCAll=[ADCAll ADC];']);
            fprintf(fid, '%s\n', ['ExtAll=[ExtAll Ext];']);
            fprintf(fid, '%s\n', ['rfTimeAll=[rfTimeAll rfTime];']);
            fprintf(fid, '%s\n', ['GzTimeAll=[GzTimeAll GzTime];']);
            fprintf(fid, '%s\n', ['GyTimeAll=[GyTimeAll GyTime];']);
            fprintf(fid, '%s\n', ['GxTimeAll=[GxTimeAll GxTime];']);
            fprintf(fid, '%s\n', ['ADCTimeAll=[ADCTimeAll ADCTime];']);
            fprintf(fid, '%s\n', ['ExtTimeAll=[ExtTimeAll ExtTime];']);
            fprintf(fid, '%s\n', ['SEtAll=[SEtAll SEt];']);
            
            fprintf(fid, '%s\n' ,['end']);
            fprintf(fid,'%s\n', '%====================================');
        end
        
        % check empty
        fprintf(fid, '%s\n', 'if isempty(rfTimeAll)');
        fprintf(fid, '%s\n', 'error(''rf sequence line can not be empty! Master Tx coil element must be used.'');');
        fprintf(fid, '%s\n', 'end');
        fprintf(fid, '%s\n', 'if isempty(GzTimeAll)');
        fprintf(fid, '%s\n', 'error(''GzSS sequence line can not be empty!'');');
        fprintf(fid, '%s\n', 'end');
        fprintf(fid, '%s\n', 'if isempty(GyTimeAll)');
        fprintf(fid, '%s\n', 'error(''GyPE sequence line can not be empty!'');');
        fprintf(fid, '%s\n', 'end');
        fprintf(fid, '%s\n', 'if isempty(GxTimeAll)');
        fprintf(fid, '%s\n', 'error(''GxR sequence line can not be empty!'');');
        fprintf(fid, '%s\n', 'end');
        fprintf(fid, '%s\n', 'if isempty(ADCTimeAll)');
        fprintf(fid, '%s\n', 'error(''ADC sequence line can not be empty!'');');
        fprintf(fid, '%s\n', 'end');
        fprintf(fid, '%s\n', 'if isempty(ExtTimeAll)');
        fprintf(fid, '%s\n', 'error(''Ext sequence line can not be empty!'');');
        fprintf(fid, '%s\n', 'end');
        
        % sort time point queue
        fprintf(fid,'%s\n', 'SEflag=repmat([0 0 0 0 0 0]'',[1 2]);');
        fprintf(fid,'%s\n', 'rfflag=repmat([1 0 0 0 0 0]'',[1 max(size(rfTimeAll))]);');
        fprintf(fid,'%s\n', 'Gzflag=repmat([0 1 0 0 0 0]'',[1 max(size(GzTimeAll))]);');
        fprintf(fid,'%s\n', 'Gyflag=repmat([0 0 1 0 0 0]'',[1 max(size(GyTimeAll))]);');
        fprintf(fid,'%s\n', 'Gxflag=repmat([0 0 0 1 0 0]'',[1 max(size(GxTimeAll))]);');
        fprintf(fid,'%s\n', 'ADCflag=repmat([0 0 0 0 1 0]'',[1 max(size(ADCTimeAll))]);');
        fprintf(fid,'%s\n', 'Extflag=repmat([0 0 0 0 0 1]'',[1 max(size(ExtTimeAll))]);');
        fprintf(fid,'%s\n', 'ts=[[min(SEtAll) max(SEtAll)] rfTimeAll GzTimeAll GyTimeAll GxTimeAll ADCTimeAll ExtTimeAll]-min(SEtAll);');
        fprintf(fid,'%s\n', 'flags=[SEflag rfflag Gzflag Gyflag Gxflag ADCflag Extflag];');
        fprintf(fid,'%s\n', '[ts,ind]=sort(ts);');
        fprintf(fid,'%s\n', 'uts=unique(ts);');
        fprintf(fid,'%s\n', 'flags=flags(:,ind);');
        
        fprintf(fid,'%s\n', '[rfTime,ind]=sort(rfTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'rfAmp=rfAmpAll(:,ind);');
        fprintf(fid,'%s\n', 'rfPhase=rfPhaseAll(:,ind);');
        fprintf(fid,'%s\n', 'rfFreq=rfFreqAll(:,ind);');
        fprintf(fid,'%s\n', 'rfCoil=rfCoilAll(:,ind);');
        fprintf(fid,'%s\n', '[GzTime,ind]=sort(GzTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'GzAmp=GzAmpAll(:,ind);');
        fprintf(fid,'%s\n', '[GyTime,ind]=sort(GyTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'GyAmp=GyAmpAll(:,ind);');
        fprintf(fid,'%s\n', '[GxTime,ind]=sort(GxTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'GxAmp=GxAmpAll(:,ind);');
        fprintf(fid,'%s\n', '[ADCTime,ind]=sort(ADCTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'ADC=ADCAll(:,ind);');
        fprintf(fid,'%s\n', '[ExtTime,ind]=sort(ExtTimeAll-min(SEtAll));');
        fprintf(fid,'%s\n', 'Ext=ExtAll(:,ind);');
        
        fprintf(fid,'%s\n', 'rfAmp(1) = 0;');
        fprintf(fid,'%s\n', 'rfPhase(1) = 0;');
        fprintf(fid,'%s\n', 'rfFreq(1) = 0;');
        fprintf(fid,'%s\n', 'GzAmp(1) = 0;');
        fprintf(fid,'%s\n', 'GyAmp(1) = 0;');
        fprintf(fid,'%s\n', 'GxAmp(1) = 0;');
        fprintf(fid,'%s\n', 'ADC(1) = 0;');
        fprintf(fid,'%s\n', 'Ext(1) = 0;');
        
        fprintf(fid,'%s\n', 'rfAmp(end) = 0;');
        fprintf(fid,'%s\n', 'rfPhase(end) = 0;');
        fprintf(fid,'%s\n', 'rfFreq(end) = 0;');
        fprintf(fid,'%s\n', 'GzAmp(end) = 0;');
        fprintf(fid,'%s\n', 'GyAmp(end) = 0;');
        fprintf(fid,'%s\n', 'GxAmp(end) = 0;');
        fprintf(fid,'%s\n', 'ADC(end) = 0;');
        fprintf(fid,'%s\n', 'Ext(end) = 0;');
        
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
%         % m function update & checking
%         try
%             eval(['[rfAmp,rfPhase,rfFreq,GzAmp,GyAmp,GxAmp,ADC,Ext,uts,ts,flags]=' FileName ';']);
%         catch me
%             error_msg{1,1}='ERROR!!! PSD m function can not produce correct pulse signal diagram! Inital checking fails!';
%             error_msg{2,1}=me.message;
%             errordlg(error_msg);
%             return;
%         end
        
    case 'MRiLabCoil'
        % S.Children(i) Coils
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='Coil_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function [B1x, B1y, B1z, E1x, E1y, E1z, Pos]=' FileName]);
        fprintf(fid, '%s\n', '%====================================');
        for i=1:length(S.Children) % Individual Coil
            for parai=1:length(S.Children(i).Attributes)
                if ~isempty(S.Children(i).Attributes(parai).Value)
                    switch S.Children(i).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Attributes(parai).Value) & ~strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=' S.Children(i).Attributes(parai).Value ';']);
                            elseif ~isempty(S.Children(i).Attributes(parai).Value) & strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=''' S.Children(i).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                end
            end
            
            fprintf(fid, '%s\n', ['[B1xt, B1yt, B1zt, E1xt, E1yt, E1zt, Post]=' S.Children(i).Name '(p);']);
            fprintf(fid, '%s\n', ['B1x(:,:,:,p.CoilID)=B1xt;']);
            fprintf(fid, '%s\n', ['B1y(:,:,:,p.CoilID)=B1yt;']);
            fprintf(fid, '%s\n', ['B1z(:,:,:,p.CoilID)=B1zt;']);
            fprintf(fid, '%s\n', ['E1x(:,:,:,p.CoilID)=E1xt;']);
            fprintf(fid, '%s\n', ['E1y(:,:,:,p.CoilID)=E1yt;']);
            fprintf(fid, '%s\n', ['E1z(:,:,:,p.CoilID)=E1zt;']);
            fprintf(fid, '%s\n', ['Pos(p.CoilID,:)=Post;']);
            fprintf(fid, '%s\n', 'p=[];');
            fprintf(fid, '%s\n', '%--------------------');
        end
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
%         % m function update & checking
%         try
%             eval(['[B1x, B1y, B1z, Pos]=' FileName ';']);
%         catch me
%             error_msg{1,1}='ERROR!!! Coil m function can not produce correct coil sensitivity map! Inital checking fails!';
%             error_msg{2,1}=me.message;
%             errordlg(error_msg);
%             return;
%         end
        
        case 'MRiLabMag'
        % S.Children(i) Magnets
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='Mag_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function dB0=' FileName]);
        fprintf(fid, '%s\n', '%====================================');
        for i=1:length(S.Children) % Individual Mag
            for parai=1:length(S.Children(i).Attributes)
                if ~isempty(S.Children(i).Attributes(parai).Value)
                    switch S.Children(i).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Attributes(parai).Value) & ~strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=' S.Children(i).Attributes(parai).Value ';']);
                            elseif ~isempty(S.Children(i).Attributes(parai).Value) & strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=''' S.Children(i).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                end
            end
            
            if i==1
                fprintf(fid, '%s\n', ['dB0t=' S.Children(i).Name '(p);']);
                fprintf(fid, '%s\n', ['dB0=dB0t;']);
            else
                fprintf(fid, '%s\n', ['dB0t=' S.Children(i).Name '(p);']);
                fprintf(fid, '%s\n', ['dB0=dB0+dB0t;']);
            end
            fprintf(fid, '%s\n', 'p=[];');
            fprintf(fid, '%s\n', '%--------------------');
        end
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
        
        case 'MRiLabMot'
        % S.Children(i) Motions
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='Mot_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function [t, ind, Disp, Axis, Ang]=' FileName]);
        fprintf(fid, '%s\n', '%====================================');
        for i=1:length(S.Children) % Individual Mov
            for parai=1:length(S.Children(i).Attributes)
                if ~isempty(S.Children(i).Attributes(parai).Value) & ~strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=' S.Children(i).Attributes(parai).Value ';']);
                elseif ~isempty(S.Children(i).Attributes(parai).Value) & strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=''' S.Children(i).Attributes(parai).Value ''';']);
                else
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                end
            end
            
            if i==1
                fprintf(fid, '%s\n', ['[tt, Dispt, Axist, Angt]=' S.Children(i).Name '(p);']);
                fprintf(fid, '%s\n', ['t=tt;']);
                fprintf(fid, '%s\n', ['ind=ones(1,length(tt));']);
                fprintf(fid, '%s\n', ['Disp=Dispt;']);
                fprintf(fid, '%s\n', ['Axis=Axist;']);
                fprintf(fid, '%s\n', ['Ang=Angt;']);
            else
                fprintf(fid, '%s\n', ['[tt, Dispt, Axist, Angt]=' S.Children(i).Name '(p);']);
                fprintf(fid, '%s\n', ['if isempty(Dispt) & ~isempty(Disp);']);
                fprintf(fid, '%s\n', ['Disp=[Disp, zeros(3,length(tt))];']);
                fprintf(fid, '%s\n', ['elseif ~isempty(Dispt) & isempty(Disp);']);
                fprintf(fid, '%s\n', ['Disp=[zeros(3,length(t)), Dispt];']);
                fprintf(fid, '%s\n', ['else Disp=[Disp, Dispt]; end;']);
                
                fprintf(fid, '%s\n', ['if isempty(Axist) & ~isempty(Axis);']);
                fprintf(fid, '%s\n', ['Axis=[Axis, Axis(:,end)*ones(1,length(tt))];']);
                fprintf(fid, '%s\n', ['elseif ~isempty(Axist) & isempty(Axis);']);
                fprintf(fid, '%s\n', ['Axis=[Axist(:,1)*ones(1,length(t)), Axist];']);
                fprintf(fid, '%s\n', ['else Axis=[Axis, Axist]; end;']);
                
                fprintf(fid, '%s\n', ['if isempty(Angt) & ~isempty(Ang);']);
                fprintf(fid, '%s\n', ['Ang=[Ang, Ang(:,end)*ones(1,length(tt))];']);
                fprintf(fid, '%s\n', ['elseif ~isempty(Angt) & isempty(Ang);']);
                fprintf(fid, '%s\n', ['Ang=[zeros(1,length(t)), Angt];']);
                fprintf(fid, '%s\n', ['else Ang=[Ang, Angt]; end;']);
                
                fprintf(fid, '%s\n', ['t=[t, tt];']);
                fprintf(fid, '%s\n', ['ind=[ind, ' num2str(i) ' * ones(1,length(tt))];']);
                
            end
            fprintf(fid, '%s\n', 'p=[];');
            fprintf(fid, '%s\n', '%--------------------');
        end
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
        case 'MRiLabGrad'
        % S.Children(i) Gradient
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='Grad_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function [GxR,GyPE,GzSS]=' FileName]);
        fprintf(fid,'%s\n', 'global VObj');
        fprintf(fid,'%s\n', 'GxR=zeros(size(VObj.Rho));');
        fprintf(fid,'%s\n', 'GyPE=zeros(size(VObj.Rho));');
        fprintf(fid,'%s\n', 'GzSS=zeros(size(VObj.Rho));');
        fprintf(fid, '%s\n', '%====================================');
        for i=1:length(S.Children) % Individual Grad
            for parai=1:length(S.Children(i).Attributes)
                if ~isempty(S.Children(i).Attributes(parai).Value)
                    switch S.Children(i).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Attributes(parai).Value) & ~strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=' S.Children(i).Attributes(parai).Value ';']);
                            elseif ~isempty(S.Children(i).Attributes(parai).Value) & strcmp(S.Children(i).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=''' S.Children(i).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Attributes(parai).Name '=[];']);
                end
            end
            
            fprintf(fid, '%s\n', ['eval([p.GradLine ' '''='' ''' S.Children(i).Name '(p);''])']);
            fprintf(fid, '%s\n', 'p=[];');
            fprintf(fid, '%s\n', '%--------------------');
        end
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
        case 'MRiLabVObj'
        % S.Children(i) VObject
        for i=1:length(S.Attributes)
            if strcmp(S.Attributes(i).Name,'Name')
               FileName=S.Attributes(i).Value;
               break;
            else
               FileName='VObj_xxx';
            end
        end
        fprintf(fid,'%s\n', ['function [Obj, VObj]=' FileName '(flag)']);
        fprintf(fid, '%s\n', '%====================================');
        for parai=1:length(S.Attributes)
            if ~isempty(S.Attributes(parai).Value)
                switch S.Attributes(parai).Value(1)
                    case '$'
                        fprintf(fid, '%s\n', ['AttributeOpt={' S.Attributes(parai).Value(3:end) '};']);
                        fprintf(fid, '%s\n', ['VObj.' S.Attributes(parai).Name '=AttributeOpt{' S.Attributes(parai).Value(2) '};']);
                    otherwise
                        if ~isempty(S.Attributes(parai).Value) & isempty(find(strcmp(S.Attributes(parai).Name,{'Notes' 'Type' 'Name'}),1))
                            fprintf(fid, '%s\n', ['VObj.' S.Attributes(parai).Name '=[' S.Attributes(parai).Value '];']);
                        elseif ~isempty(S.Attributes(parai).Value) & ~isempty(find(strcmp(S.Attributes(parai).Name,{'Notes' 'Type' 'Name'}),1))
                            fprintf(fid, '%s\n', ['VObj.' S.Attributes(parai).Name '=''' S.Attributes(parai).Value ''';']);
                        else
                            fprintf(fid, '%s\n', ['VObj.' S.Attributes(parai).Name '=[];']);
                        end
                end
            else
                fprintf(fid, '%s\n', ['VObj.' S.Attributes(parai).Name '=[];']);
            end
        end
        
        fprintf(fid, '%s\n', ['[x,y,z]=meshgrid(((-(VObj.XDim-1)/2):((VObj.XDim-1)/2))*VObj.XDimRes,' ...
                              '((-(VObj.YDim-1)/2):((VObj.YDim-1)/2))*VObj.YDimRes,' ...
                              '((-(VObj.ZDim-1)/2):((VObj.ZDim-1)/2))*VObj.ZDimRes);']);
        fprintf(fid, '%s\n', ['rho=zeros([size(x) VObj.TypeNum]);']);
        fprintf(fid, '%s\n', ['t1=zeros([size(x) VObj.TypeNum]);']);
        fprintf(fid, '%s\n', ['t2=zeros([size(x) VObj.TypeNum]);']);
        fprintf(fid, '%s\n', ['t2star=zeros([size(x) VObj.TypeNum]);']);
        fprintf(fid, '%s\n', ['chemshift=zeros(1,VObj.TypeNum);']);
        fprintf(fid, '%s\n', ['typeflag=zeros(1,VObj.TypeNum);']);
        fprintf(fid, '%s\n', ['lineshapeflag=zeros(1,VObj.TypeNum);']);
        fprintf(fid, '%s\n', ['k=zeros([size(x) VObj.TypeNum^2]);']);
        fprintf(fid, '%s\n', ['econ=zeros([size(x) 3]);']);
        fprintf(fid, '%s\n', ['massden=zeros(size(x));']);
        fprintf(fid, '%s\n', '%====================================');
        for i=1:length(S.Children) % Individual Object
            
            for parai=1:length(S.Children(i).Attributes)
                if ~isempty(S.Children(i).Attributes(parai).Value)
                    switch S.Children(i).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', [S.Children(i).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Attributes(parai).Value) & isempty(find(strcmp(S.Children(i).Attributes(parai).Name,{'Notes' 'Color'}),1))
                                fprintf(fid, '%s\n', [S.Children(i).Attributes(parai).Name '=[' S.Children(i).Attributes(parai).Value '];']);
                            elseif ~isempty(S.Children(i).Attributes(parai).Value) & ~isempty(find(strcmp(S.Children(i).Attributes(parai).Name,{'Notes' 'Color'}),1))
                                fprintf(fid, '%s\n', [S.Children(i).Attributes(parai).Name '=''' S.Children(i).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', [S.Children(i).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', [S.Children(i).Attributes(parai).Name '=[];']);
                end
            end
            
            for parai=1:length(S.Children(i).Children(1).Attributes)
                if ~isempty(S.Children(i).Children(1).Attributes(parai).Value)
                    switch S.Children(i).Children(1).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Children(1).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', ['p.' S.Children(i).Children(1).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Children(1).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Children(1).Attributes(parai).Value) & ~strcmp(S.Children(i).Children(1).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Children(1).Attributes(parai).Name '=[' S.Children(i).Children(1).Attributes(parai).Value '];']);
                            elseif ~isempty(S.Children(i).Children(1).Attributes(parai).Value) & strcmp(S.Children(i).Children(1).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Children(1).Attributes(parai).Name '=''' S.Children(i).Children(1).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', ['p.' S.Children(i).Children(1).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', ['p.' S.Children(i).Children(1).Attributes(parai).Name '=[];']);
                end
            end
            
            for parai=1:length(S.Children(i).Children(2).Attributes)
                if ~isempty(S.Children(i).Children(2).Attributes(parai).Value)
                    switch S.Children(i).Children(2).Attributes(parai).Value(1)
                        case '$'
                            fprintf(fid, '%s\n', ['AttributeOpt={' S.Children(i).Children(2).Attributes(parai).Value(3:end) '};']);
                            fprintf(fid, '%s\n', [S.Children(i).Children(2).Attributes(parai).Name '=AttributeOpt{' S.Children(i).Children(2).Attributes(parai).Value(2) '};']);
                        otherwise
                            if ~isempty(S.Children(i).Children(2).Attributes(parai).Value) & ~strcmp(S.Children(i).Children(2).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', [S.Children(i).Children(2).Attributes(parai).Name '=[' S.Children(i).Children(2).Attributes(parai).Value '];']);
                            elseif ~isempty(S.Children(i).Children(2).Attributes(parai).Value) & strcmp(S.Children(i).Children(2).Attributes(parai).Name,'Notes')
                                fprintf(fid, '%s\n', [S.Children(i).Children(2).Attributes(parai).Name '=''' S.Children(i).Children(2).Attributes(parai).Value ''';']);
                            else
                                fprintf(fid, '%s\n', [S.Children(i).Children(2).Attributes(parai).Name '=[];']);
                            end
                    end
                else
                    fprintf(fid, '%s\n', [S.Children(i).Children(2).Attributes(parai).Name '=[];']);
                end
            end
            
            fprintf(fid, '%s\n', ['[mask, fvc]=' S.Children(i).Name '(p,x,y,z,flag);']);
            fprintf(fid, '%s\n', ['Obj{1,' num2str(i) '}=fvc;']);
            fprintf(fid, '%s\n', ['Obj{2,' num2str(i) '}=Color;']);
            fprintf(fid, '%s\n', ['Obj{3,' num2str(i) '}=Alpha;']);
            fprintf(fid, '%s\n', ['rho(:,:,:,TypeIdx)=rho(:,:,:,TypeIdx)+mask.*Rho;']);
            fprintf(fid, '%s\n', ['t1(:,:,:,TypeIdx)=t1(:,:,:,TypeIdx)+mask.*T1;']);
            fprintf(fid, '%s\n', ['t2(:,:,:,TypeIdx)=t2(:,:,:,TypeIdx)+mask.*T2;']);
            fprintf(fid, '%s\n', ['t2star(:,:,:,TypeIdx)=t2star(:,:,:,TypeIdx)+mask.*T2Star;']);
            
            fprintf(fid, '%s\n', ['massden=massden+mask.*MassDen;']);
            fprintf(fid, '%s\n', ['econ(:,:,:,1)=econ(:,:,:,1)+mask.*ECon(1);']);
            fprintf(fid, '%s\n', ['econ(:,:,:,2)=econ(:,:,:,2)+mask.*ECon(2);']);
            fprintf(fid, '%s\n', ['econ(:,:,:,3)=econ(:,:,:,3)+mask.*ECon(3);']);
            
            fprintf(fid, '%s\n', ['chemshift(TypeIdx)=ChemShift;']);
            fprintf(fid, '%s\n', ['typeflag(TypeIdx)=TypeFlag;']);
            fprintf(fid, '%s\n', ['lineshapeflag(TypeIdx)=LineShapeFlag;']);
            fprintf(fid, '%s\n', ['if ~strcmp(VObj.Model,''Normal'')']);
            fprintf(fid, '%s\n', ['for i=1:VObj.TypeNum']);
            fprintf(fid, '%s\n', ['k(:,:,:,(TypeIdx-1)*VObj.TypeNum+i)=k(:,:,:,(TypeIdx-1)*VObj.TypeNum+i)+mask.*K(i);']);
            fprintf(fid, '%s\n', ['end']);
            fprintf(fid, '%s\n', ['end']);
            fprintf(fid, '%s\n', 'p=[];');
            fprintf(fid, '%s\n', '%--------------------');
        end
        
        fprintf(fid, '%s\n', ['VObj.Rho=rho;']);
        fprintf(fid, '%s\n', ['VObj.T1=t1;']);
        fprintf(fid, '%s\n', ['VObj.T2=t2;']);
        fprintf(fid, '%s\n', ['VObj.T2Star=t2star;']);
        fprintf(fid, '%s\n', ['VObj.ECon=econ;']);
        fprintf(fid, '%s\n', ['VObj.MassDen=massden;']);
        fprintf(fid, '%s\n', ['VObj.ChemShift=chemshift;']);
        fprintf(fid, '%s\n', ['if strcmp(VObj.Model,''GM'')']);
        fprintf(fid, '%s\n', ['k=reshape(k,[size(x), VObj.TypeNum, VObj.TypeNum]);']);
        fprintf(fid, '%s\n', ['VObj.TypeFlag=typeflag;']);
        fprintf(fid, '%s\n', ['VObj.LineShapeFlag=lineshapeflag;']);
        fprintf(fid, '%s\n', ['end']);
        fprintf(fid, '%s\n', ['if ~strcmp(VObj.Model,''Normal'')']);
        fprintf(fid, '%s\n', ['VObj.K=k;']);
        fprintf(fid, '%s\n', ['end']);
        fprintf(fid,'%s\n', 'end');
        
        frewind(fid);
        fclose(fid);
        
end

end